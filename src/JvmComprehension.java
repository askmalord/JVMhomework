public class JvmComprehension {

    public static void main(String[] args) {
        int i = 1;                      // 1
        Object o = new Object();        // 2
        Integer ii = 2;                 // 3
        printAll(o, i, ii);             // 4
        System.out.println("finished"); // 7
    }

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;                   // 5
        System.out.println(o.toString() + i + ii);  // 6
    }
}


/*
В начале происходит прогрузка классов: JvmComprehension,
(Object, Integer и System судя по всему также подгружаются на этом этапе, если я не прав, просьба поправить)
Далее идут стадии Linking и Initialization, поскольку примитивов в статических полях у нас нет,
то по идее нечему инициализироваться
Области памяти:
В Metaspace будет храниться информации об имени класса - JvmComprehension,
методы - main и printAll
Стэк:
В момент вызова main открывается первый (главный) фрейм - main(),
инициализируется переменная int i = 1 (хранится также во фрейме),
строчки //2 и //3: ссылки хранятся во фрейме, сами объекты хранятся в куче
Когда исполняемый код доходит до строчки //4 открывается новый фрейм - printAll(),
в этом фрейме хранятся ссылочные переменные o, i, ii, ссылающиеся на объекты из кучи,
ссылочная переменная //5 будет храниться во фрейме printAll(), а значение в куче
В момент вызова //6 откроется новый фрейм println(), в куче появится новый объект, получившийся
в результате конкатенации трех объектов, ссылка на получившийся объект у нас будет отсутствовать
В //7 аналогично будет открыт новый фрейм println(), в куче будет хранится новый объект "finished",
ссылка на который также будет отсутствовать

Сборка мусора:
при сборке мусора будет при следующей сборке мусора удален из кучи объект строки //5,
т.к. на него не ссылается ни один другой объект программы
После того как проидет вызов метода printAll(),
на оставшиеся объекты не будет ссылаться ни один другой объект выполняемого кода, следовательно,
При дальнейшей чистке эти объекты также будут собраны сборщиком мусора (предполагаю, что из survivor0)
 */